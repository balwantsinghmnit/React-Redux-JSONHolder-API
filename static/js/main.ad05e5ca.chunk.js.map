{"version":3,"sources":["reducers/postReducer.js","reducers/index.js","actions/types.js","store.js","components/Posts.js","actions/postActions.js","components/PostForm.js","App.js","serviceWorker.js","index.js"],"names":["intialState","items","item","combineReducers","posts","state","action","type","payload","filter","id","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","Posts","deletePost","props","this","fetchPosts","nextProps","newPost","unshift","map","post","style","border","marginTop","width","title","onClick","float","body","Component","connect","dispatch","fetch","then","res","json","PostForm","onChange","bind","onSubmit","e","setState","target","name","value","preventDefault","createPost","placeholder","method","headers","JSON","stringify","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ad05e5ca.chunk.js","sourcesContent":["import {FETCH_POSTS,NEW_POST,DELETE_POST} from \"../actions/types\";\n\nconst intialState = {\n    items:[],\n    item:{}\n}\n\nexport default function(state=intialState,action)\n{\n    switch(action.type)\n    {\n        case FETCH_POSTS:\n            return{\n                ...state,\n                items:action.payload\n            }\n        case NEW_POST:\n            return {\n                ...state,\n                item:action.payload\n            }\n        case DELETE_POST:\n            return{\n                ...state,\n                items:state.items.filter(item=>item.id!==action.payload)\n            }\n        default:\n            return {\n                ...state\n            }\n    }\n}","import postReducer from \"./postReducer\";\nimport {combineReducers} from \"redux\";\n\nexport default combineReducers({\n    posts:postReducer\n});","export const FETCH_POSTS = \"FETCH_POSTS\";\nexport const NEW_POST = \"NEW_POST\";\nexport const DELETE_POST = \"DELETE_POST\";\n\n","import {createStore,applyMiddleware,compose} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers/index\";\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n);\n\n\nexport default store;\n","import React, { Component } from 'react';\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {fetchPosts,deletePost} from \"../actions/postActions\";\n\nclass Posts extends Component {\n\n    componentWillMount()\n    {\n        this.props.fetchPosts();\n    }\n    componentWillReceiveProps(nextProps)\n    {\n        if(nextProps.newPost)\n        {\n            this.props.posts.unshift(nextProps.newPost);\n        }\n    }\n    deletePost = (id)=>{\n        this.props.deletePost(id);\n    }\n    render() {\n        return this.props.posts.map(post=>(\n            <div style={{border:\"1px solid #333\",marginTop:\"20px\",width:\"60%\"}}>\n                <h5>{post.title}<button onClick={()=>this.deletePost(post.id)} style={{float:\"right\"}}>delete</button></h5>\n                <p>{post.body}</p>\n            </div>\n        ));\n    }\n}\n\nPosts.propTypes = {\n    fetchPosts:PropTypes.func.isRequired,\n    deletePost:PropTypes.func.isRequired,\n    posts:PropTypes.array.isRequired,\n    newPost:PropTypes.object\n};\n\nconst mapStateToProps = state =>({\n    posts:state.posts.items,\n    newPost:state.posts.item\n});\nexport default connect(mapStateToProps,{fetchPosts,deletePost})(Posts);\n","import {FETCH_POSTS,NEW_POST,DELETE_POST} from \"./types\";\n\n//fetch posts\nexport const fetchPosts = ()=> dispatch=>{\n    fetch(\"https://jsonplaceholder.typicode.com/posts\")\n    .then(res=>res.json())\n    .then(posts=>dispatch({\n        type:FETCH_POSTS,\n        payload:posts\n    }))\n}\n\n//new post \nexport const createPost = (newPost)=>dispatch=>\n{\n    fetch(\"https://jsonplaceholder.typicode.com/posts\",{\n        method:\"POST\",\n        headers:{\"content-type\":\"application/json\"},\n        body:JSON.stringify(newPost)\n    })\n    .then(res=>res.json())\n    .then(post=>dispatch({\n        type:NEW_POST,\n        payload:post\n    }))\n}\n\n//delete post\nexport const deletePost = (id)=>dispatch=>{\n    dispatch({\n        type:DELETE_POST,\n        payload:id\n    });\n}\n","import React, { Component } from 'react';\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {createPost} from \"../actions/postActions\";\n\nclass PostForm extends Component {\n    constructor(props)\n    {\n        super(props);\n        this.state={\n            title:\"\",\n            body:\"\"\n        };\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n    onChange(e){\n        this.setState({\n            [e.target.name]:e.target.value\n        });\n    }\n    onSubmit(e)\n    {\n        e.preventDefault();\n        const post = {\n            title:this.state.title,\n            body:this.state.body\n        };\n        this.props.createPost(post);\n    }\n    render() {\n        return (\n            <div style={{marginTop:\"50px\"}}>\n                <form onSubmit={this.onSubmit}>\n                    <input type=\"text\" placeholder=\"Title\" name=\"title\" value={this.state.title} onChange={this.onChange} /><br/><br/>\n                    <textarea placeholder=\"Body\" name=\"body\" value={this.state.body} onChange={this.onChange}></textarea><br/><br/>\n                    <button type=\"submit\">Submit</button>\n                </form>\n            </div>\n        )\n    }\n}\nPostForm.propTypes = {\n    createPost:PropTypes.func.isRequired\n};\nexport default connect(null,{createPost})(PostForm);\n","import React from 'react';\nimport './App.css';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\nimport Posts from './components/Posts';\nimport PostForm from './components/PostForm';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n    <center>\n      <div className=\"App\">\n      <PostForm/>\n        <Posts/>\n      </div>\n      </center>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}